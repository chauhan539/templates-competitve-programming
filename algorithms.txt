                                                                             ------*** MY TEMPLATE ***-------

/*/ Author : Abhishek Chauhan /*/

#include<bits/stdc++.h>
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace std::chrono;
using namespace __gnu_pbds;
using namespace std;
#define int                  long long
#define pb                   push_back
#define mp                   make_pair
#define all(x)               x.begin(),x.end()
#define mod                  1000000007
#define umap                 unordered_map
#define trailzero(x)         __builtin_ctz(x)
#define bpop(x)              __builtin_popcountll((x))
#define fastio               ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define endl                 '\n'

template<class T> 
using ordered_set = tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

template<class T>
T power(T x, T y){T res = 1;while (y > 0){ if (y & 1){res = res*x;} y = y>>1;x = x*x;}return res;}
template<class T>
T powermod(T x, T y, T p){T res = 1;x = x % p;while (y > 0){if (y & 1){res = (res*x) % p;}y = y>>1; x = (x*x) % p;}return res;}

struct custom_hash { // Credits: https://codeforces.com/blog/entry/62393
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
    size_t operator()(pair<int64_t,int64_t> Y) const{
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(Y.first * 31 + Y.second + FIXED_RANDOM);
    }
};

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
inline int64_t random_long(long long l,long long r){
    uniform_int_distribution<int64_t> generator(l,r);
    return generator(rng);
}
inline int64_t random_long(){
    uniform_int_distribution<int64_t> generator(LLONG_MIN,LLONG_MAX);
    return generator(rng);
}

void __print(int x)                 {cerr << x;}
void __print(float x)               {cerr << x;}
void __print(double x)              {cerr << x;}
void __print(long double x)         {cerr << x;}
void __print(char x)                {cerr << '\'' << x << '\'';}
void __print(const char *x)         {cerr << '\"' << x << '\"';}
void __print(const string &x)       {cerr << '\"' << x << '\"';}
void __print(bool x)                {cerr << (x ? "true" : "false");}
template<typename T, typename V>
void __print(const pair<T, V> &x)   {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x)            {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print()                       {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v)            {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...)                 cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif
void snow(){

   

}
int32_t main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    auto start = high_resolution_clock::now();
    fastio;
    int _;
    _=1;
    cin>>_;
    for(int i=1;i<=_;i++){
     // cout<<"Case #"<<i<<": ";
        snow();
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start); 
    #ifndef ONLINE_JUDGE
     cerr << "Time: " << duration.count()/1000.0 << endl;
    #endif   
    return 0;
}






65930931361698  -  macat

                                                                              --- *** modular arithmetic*** - -
template <int MOD=998244353>
struct Modular {
  int value;
  static const int MOD_value = MOD;

  Modular(long long v = 0) { value = v % MOD; if (value < 0) value += MOD;}
  Modular(long long a, long long b) : value(0){ *this += a; *this /= b;}

  Modular& operator+=(Modular const& b) {value += b.value; if (value >= MOD) value -= MOD; return *this;}
  Modular& operator-=(Modular const& b) {value -= b.value; if (value < 0) value += MOD;return *this;}
  Modular& operator*=(Modular const& b) {value = (long long)value * b.value % MOD;return *this;}

  friend Modular mexp(Modular a, long long e) {
    Modular res = 1; while (e) { if (e&1) res *= a; a *= a; e >>= 1; }
    return res;
  }
  friend Modular inverse(Modular a) { return mexp(a, MOD - 2); }

  Modular& operator/=(Modular const& b) { return *this *= inverse(b); }
  friend Modular operator+(Modular a, Modular const b) { return a += b; }
  friend Modular operator-(Modular a, Modular const b) { return a -= b; }
  friend Modular operator-(Modular const a) { return 0 - a; }
  friend Modular operator*(Modular a, Modular const b) { return a *= b; }
  friend Modular operator/(Modular a, Modular const b) { return a /= b; }
  friend std::ostream& operator<<(std::ostream& os, Modular const& a) {return os << a.value;}
  friend bool operator==(Modular const& a, Modular const& b) {return a.value == b.value;}
  friend bool operator!=(Modular const& a, Modular const& b) {return a.value != b.value;}
};

using mint = Modular<998244353>;
/// use mind same as int
/// dont worry about inverse or divide it can handle both of them and works also with long long :)

/*                                                           
                                                                               -----*** SEGMENT TREE ***--------
      
const int mxn = 5e5+10;
int st[8*mxn];
int lazy[8*mxn];
int arr[mxn];
int merge(int a,int b){
   return (a+b);
}
void propagate(int ss,int se,int si){
    if(lazy[si]){
        st[si]+= (se-ss+1)*lazy[si];
        if(ss!=se){
            lazy[2*si+1]+=lazy[si];
            lazy[2*si+2]+=lazy[si];
        }
        lazy[si] = 0;
    }
}
void lazy_update(int ss,int se,int si,int qs,int qe,int diff){
    propagate(ss,se,si);
    if(ss>se || qe < ss || se < qs){
        return ;
    }
    if(qs<=ss && se<=qe){
        st[si]+=(se-ss+1)*diff;
        if(ss!=se){
           lazy[2*si+1]+=diff;
           lazy[2*si+2]+=diff;
        }
        return;
    }
    int mid = (ss+se)/2;
    lazy_update(ss,mid,2*si+1,qs,qe,diff);
    lazy_update(mid+1,se,2*si+2,qs,qe,diff);
    st[si] = merge(st[2*si+1],st[2*si+2]);
}
void update(int ss, int se,int index, int value, int node)
{
    if (ss == se)
    {
        arr[index] = value;
        st[node] = value;
    }
    else {
            int mid =  ss+(se-ss)/2;
            if (index >= ss && index <= mid)
                update(ss, mid, index,value, 2 * node + 1);
            else
                update(mid + 1, se,index, value, 2 * node + 2);
            st[node] = merge(st[2 * node + 1],st[2 * node + 2]);
    }
    return;
}
int query( int ss, int se, int qs, int qe, int si)
{
    propagate(ss,se,si);
    if (qs <= ss && qe >= se)
        return st[si];
    if (se < qs || ss > qe)
        return 0;
    int mid = ss+(se-ss)/2;
    return merge(query( ss, mid, qs, qe, 2*si+1),query( mid+1, se, qs, qe, 2*si+2));
}
void build(int ss, int se,int si)
{
    if (ss == se){
        st[si] = arr[ss];
        return;
    }
    int mid = ss+(se-ss)/2;
    build(ss , mid, 2*si +1);
    build(mid+1, se,2*si +2);
    st[si]  = merge(st[2*si+1],st[2*si+2]);
}
                                                                                  ----***SPARSE TABE***-----
                                                     
O(1) query sparse matrix for Max/Min/GCD
int RMQ[20][N];
void precompute()
{
	for(int i=0;(1<<i)<N;i++)
	{
		for(int j=(1<<i);j<N && j<(1<<(i+1)); j++)
			floorlog[j]=i;
	}
	for(int i=n;i>=1;i--)
	{
		RMQ[0][i]=dp[i]; 
		int mxj=floorlog[n-i+1]; //2^j <= n-i+1
		int pw=1;
		for(int j=1;j<=mxj;j++)
		{
			RMQ[j][i]=max(RMQ[j-1][i], RMQ[j-1][i+pw]);
			pw<<=1;
		}
	}	
}
int getMax(int L, int R)
{
	int k=floorlog[R-L+1]; //2^k <= R-L+1
	return max(RMQ[k][L], RMQ[k][R - (1<<k) +1]);
}								

                                                                        -----**** factorial and inverse factorial***----	
const int N = 3e5+10;
int fact[N];
int invfact[N];
int modinv(int k)
{
	return powermod(k, MOD-2, MOD);
}
 
void precompute()
{
	fact[0]=fact[1]=1;
	for(int i=2;i<N;i++)
	{
		fact[i]=fact[i-1]*i;
		fact[i]%=MOD;
	}
	invfact[N-1]=modinv(fact[N-1]);
	for(int i=N-2;i>=0;i--)
	{
		invfact[i]=invfact[i+1]*(i+1);
		invfact[i]%=MOD;
	}
}
				  
                                                                                    ----*** NCR ***-------
int nCr(int n, int r)
{
    long long p = 1, k = 1;
    if (n - r < r)
        r = n - r;
    if (r != 0) {
        while (r) {
            p *= n;
            k *= r;
            long long m = __gcd(p, k);
            p /= m;
            k /= m;
            n--;
            r--;
        }
	}
    else
        p = 1;
    return p;
}
                                                                            ------*** print divisors 1 to n ***-------
vector<int> printDivisors(int n)
{
    vector<int>v;
    for (int i=1; i<=sqrt(n); i++)
    {
        if (n%i == 0)
        {
            if (n/i == i)
                v.pb(i);
            else
                v.pb(i),v.pb(n/i);
        }
    }
    return v;
}
                                                                                ------*** isPrime ***------
//check if a number is prime   O(sqrt(n))
bool isPrime(int n)
{
    if (n <= 1)  return false;
    if (n <= 3)  return true;
    if (n%2 == 0 || n%3 == 0) return false;
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
    return true;
}                                               
                                                                             ------*** prime factorization *** -------
const int MAXN = 100000;
int spf[MAXN];
// spf contains smallest prime factor of n
void sieve()
{   spf[1] = 1;
    for (int i=2; i<MAXN; i++)
       spf[i] = i;
    for (int i=4; i<MAXN; i+=2)
        spf[i] = 2;
    for (int i=3; i*i<MAXN; i++)
    {
        if (spf[i] == i)
        {
            for (int j=i*i; j<MAXN; j+=i)
                if (spf[j]==j)
                    spf[j] = i;
        }
    }
}
// A O(log n) function returning primefactorization
vector<int> getFactorization(int x)
{
    vector<int> ret;
    while (x != 1)
    {
        ret.push_back(spf[x]);
        x = x / spf[x];
    }
    return ret;
}                                                           
                                                               
                                                                               -----*** TOPOLOGICAL SORT ***--------


vector<int> order; //Stores the Topological Order
const int mxn = 1e6+10;
vector<int>g[mxn];
bool toposort(int n) //Returns 1 if there exists a toposort, 0 if there is a cycle
{	
	queue<int> q;
	vector<int> indeg(n + 1, 0);
	for(int i = 1; i <= n; i++)
		for(auto &it:g[i])
			indeg[it]++;
	for(int i = 1; i <= n; i++)
	{
		if(!indeg[i])
			q.push(i);
	}
	while(!q.empty())
	{
		int u = q.front();
		q.pop();
		order.push_back(u);
		for(auto &v:g[u])
		{
			indeg[v]--;
			if(!indeg[v])
				q.push(v);
		}
	}
	return (order.size() == n);
}
                                                                           -----***cycle detection in directed graph***-----



bool findLoop(int v) 
{
	if(vis[v]==1)
		return 1;
	if(vis[v]==2)
		return 0;
	vis[v]=1;
	for(auto &it:g[v])
	{
		if(findLoop(it))
			return 1;
	}
	vis[v]=2;
	return 0;
}
bool checkLoop()
{
	fill(vis+1, vis+n+1, 0);
	for(int i=1;i<=n;i++)
	{
		if(!vis[i] && findLoop(i))
			return 1;
	}
	return 0;
}                               
                                                                             -------*** FLOYD WARSHALL ***----
                                                                          All Pairs Shortest Path problem in 0(n^3)


                                                 
                                                 
int dist[N][N];
void FloydWarshall()
{
	for(int k=1;k<=n;k++)
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				dist[i][j]=min(dist[i][j], dist[i][k] + dist[k][j]);


}
                                                                         -----**** Dijkstra with Path ***------


int arrival[N], departure[N], vis[N], parent[N];
vector<pair<int, int> > g[N];
void dijkstra(int source, int destination)
{
	for(int i=1;i<=n;i++)
	{
		arrival[i]=1e18;
		departure[i]=1e18;
		vis[i]=0;
	}
	arrival[source]=0;
	set<pair<int, int> > s;
	s.insert({0, source});
	while(!s.empty())
	{
		auto x = *(s.begin());
		s.erase(x);
		vis[x.second]=1;
		departure[x.second]=arrival[x.second];
		for(auto it:g[x.second])
		{
			if(arrival[it.first] > departure[x.second] + it.second)
			{
				s.erase({arrival[it.first], it.first});
				arrival[it.first]=departure[x.second] + it.second;
				s.insert({arrival[it.first], it.first});
				parent[it.first]=x.second;
			}
		}
	}
	if(!vis[destination])
	{
		cout<<"-1";
		return;
	}
	int v=destination;
	vector<int> ans;
	while(parent[v])
	{
		ans.push_back(v);
		v=parent[v];
	}
	ans.push_back(source);
	reverse(ans.begin(), ans.end());
	for(auto it:ans)
		cout<<it<<" ";
}

                                                                    -------*** Simple Dijkstra: ***--------



int arrival[N][N], departure[N][N];
vector<pair<int, int> > g[N];
void dijkstra(int source, int destination, int arrival[], int departure[])
{
	for(int i=1;i<=n;i++)
	{
		arrival[i]=inf;
		departure[i]=inf;
	}
	arrival[source]=0;
	set<pair<int, int> > s;
	s.insert({0, source});
	while(!s.empty())
	{
		auto x = *(s.begin());
		s.erase(x);
		departure[x.second]=arrival[x.second];
		for(auto it:g[x.second])
		{
			if(arrival[it.first] > departure[x.second] + it.second)
			{
				s.erase({arrival[it.first], it.first});
				arrival[it.first]=departure[x.second] + it.second;
				s.insert({arrival[it.first], it.first});
			}
		}
	}
}
                      
					                           ------*** SCC IN DIRECTED GRAPH KOSARAJU'S ***------



/// grp -> now of groups
/// g ->  directed graph
///rg ->  reverse directed graph
/// undirg -> undirected graph
///comp -> stores grp number of nodes
///sz -> stores size of groups
///todo -> toposort of graph
					                               
					                            	                               
const int N = 1e5 + 5;
int n,m;
int grp = 0;  
vector<int>g[N],rg[N],undirg[N],todo;
int comp[N],sz[N];
bool vis[N];
void sccaddedge(int u,int v){
	g[u].pb(v);
	rg[v].pb(u);	
}
void dfs(int node){
	vis[node] = true;
	for(auto x:g[node]){
		if(!vis[x]){
			dfs(x);
		}
	}
	todo.pb(node);
}
void dfs2(int node,int val){
	comp[node] = val;
	sz[val]++;
	for(auto x:rg[node]){
		if(comp[x]==-1){
			dfs2(x,val);
		}
	}
}
void scc(){
	
	for(int i = 1; i <= n; i++)
		comp[i] = -1;
		
	for(int i=1;i<=n;i++){
		if(!vis[i]){
			dfs(i);
		}
	}
	reverse(all(todo));
	for(auto it:todo){
		if(comp[it]==-1){
			dfs2(it,++grp);
		}
	}
}                                
                                                                        --------*** KRUKSHAL MST ***-----------



//// g is origninal graph
//// adj is the MST graph
//// cost contain min cost  
const int N = 2e5+5;
struct data1
{
	int u, v, w, idx;
};
int n, m;
int connected;
int root[N], sz[N];
vector<pair<int, int>> g[N];
vector<pair<int,int>>adj[N];
data1 edges[N];
void init()
{
	for(int i=1;i<=n;i++)
	{
		root[i]=i;
		sz[i]=1;
	}
	connected=n;
}
int rt(int k)
{
	while(k!=root[k])
	{
		root[k]=root[root[k]];
		k=root[k];
	}
	return k;
}
void merge(int u, int v)
{
	int rt1=rt(u);
	int rt2=rt(v);
	if(rt1==rt2)
		return;
	connected--;
	if(sz[rt1]>sz[rt2])
		swap(rt1, rt2);
	sz[rt2]+=sz[rt1];
	sz[rt1]=0;
	root[rt1]=root[rt2];
}
void add_edge(int idx, int u, int v, int w)
{
	g[u].push_back({v, w});
	g[v].push_back({u, w});
	edges[idx].u = u;
	edges[idx].idx = idx;
	edges[idx].v = v;
	edges[idx].w = w;
	
}
bool comp(data1 &d1, data1 &d2)
{
	return d1.w < d2.w;
}	
int kruskalMST()
{	
	init();
	int cost=0;
	sort(edges+1, edges+m+1, comp);
	for(int i=1;i<=m;i++)
	{
		int u=edges[i].u, v=edges[i].v, w=edges[i].w;
		int rt1=rt(u), rt2=rt(v);
		if(rt1==rt2)
			continue;
		else
		{
			cost+=w;
			adj[u].pb(mp(v,w));
			adj[v].pb(mp(u,w));
			merge(rt1, rt2);
		}
	}
	return cost;
}            

                                                                       ------- DISJOINT SET UNION----------



struct DSU
{
	int connected;
	vector<int> par, sz;
 
	void init(int n) 65
	{
		par = sz = vector<int> (n + 1, 0);
		for(int i = 1; i <= n; i++)
			par[i] = i, sz[i] = 1;
		connected = n;
	}
 
	int getPar(int u)
	{
		while(u != par[u])
		{
			par[u] = par[par[u]];
			u = par[u];
		}
		return u;
	}
 
	int getSize(int u)
	{
		return sz[getPar(u)];
	}
 
	void unite(int u, int v)
	{
		int par1 = getPar(u), par2 = getPar(v);
 
		if(par1 == par2)
			return;
 
		connected--;
 
		if(sz[par1] > sz[par2])
			swap(par1, par2);
 
		sz[par2] += sz[par1];
		sz[par1] = 0;
		par[par1] = par[par2];
	}
};
	                                               
                                                          
                                                                     ------- *** BINARY LIFTING LCA IN logn ***---------



                                                         
int n, l;
vector<vector<int>> adj;
int timer;
vector<int> tin, tout;
vector<vector<int>> up;
void dfs(int v, int p)
{
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i <= l; ++i)
        up[v][i] = up[up[v][i-1]][i-1];
    for (int u : adj[v]) {
        if (u != p)
            dfs(u, v);
    }
    tout[v] = ++timer;
}
bool is_ancestor(int u, int v)
{
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}
int lca(int u, int v)
{
    if (is_ancestor(u, v))
        return u;
    if (is_ancestor(v, u))
        return v;
    for (int i = l; i >= 0; --i) {
        if (!is_ancestor(up[u][i], v))
            u = up[u][i];
    }
    return up[u][0];
}
void preprocess(int root) {
    tin.resize(n);
    tout.resize(n);
    timer = 0;
    l = ceil(log2(n));
    up.assign(n, vector<int>(l + 1));
    dfs(root, root);
}                                                         
                                                                              --------*** KMP SEARCH ***-----



vector<int> prefix_function(string &s) 
{
	int n = s.size();
	vector<int> pi(n);
	for(int i = 1; i < n; i++) 
	{
		int j = pi[i - 1];
		while(j > 0 && s[i] != s[j])
			j = pi[j - 1];
		if (s[i] == s[j])
			j++;
		pi[i] = j;
	}
	return pi;
}
vector<int> find_occurences(string &text, string &pattern)
{
	string cur = pattern + '#' + text;
	int sz1 = text.size(), sz2 = pattern.size();
	vector<int> v;
	vector<int> lps = prefix_function(cur);
	for(int i = sz2 + 1; i <= sz1 + sz2; i++)
	{
		if(lps[i] == sz2)
			v.push_back(i - 2 * sz2);
	}
	return v;
}


                                                                            --------*** Trie datastructure ***--------



                                              
struct Trie{
	Trie *child[26];
	bool isend;
	Trie(){
		isend = false;
		for(int i=0;i<26;i++){
			child[i] = NULL;
		}
	}	
};
void insert(string s,Trie *root){
   Trie *curr = root;
   for(int i=0;i<s.size();i++){
   	   int ind = s[i]-'a';   	   
   	   if(curr->child[ind]==NULL){
   	   	   curr->child[ind] = new Trie();
   	   }
   	   curr = curr->child[ind]; 	   
   }
   curr->isend = true;
}
bool search(string s,Trie *root){
	Trie *curr = root;
	for(int i=0;i<s.size();i++){
		int ind = s[i]-'a';
		if(curr->child[ind]==NULL){
			return false;
		}
		curr = curr->child[ind];
	}
	return curr->isend;
}

               ---------*** find the longest length regular bracket***---
int bracket(string s){
	int ans=0;
	stack<int>st;
    st.push(-1);
    for(int i=0;i<s.size();i++){
	   if(s[i]=='('){
	     st.push(i);
	   }
	   else{
	     st.pop();
	     if(!st.empty()){
	        ans = max(ans,i-st.top());
	     }
	     else{
	       st.push(i);
	     }
	   }
    }
    return ans;
}                   

                                                                                     ------ ncr modulo---


int ncr(int n, int r) {
    if(r > n) return 0;
    return (fact[n] * ((powermod(fact[n-r], mod-2,mod) * powermod(fact[r], mod-2,mod))%mod))%mod;
}

                                                                                    ------ Z - function ------



vector<int> z_function(string &s)
{
	int n=s.size();
	vector<int> z(n);
	for(int i=1,l=0,r=0;i<n;i++)
	{
		if(i<=r)
			z[i]=min(r-i+1, z[i-l]);
		while(i+z[i]<n && s[z[i]]==s[i+z[i]])
			z[i]++;
		if(i+z[i]-1>r)
			l=i, r=i+z[i]-1;
	}
	return z;
}

///  z array represent -> lenght equal to z[i]  - > starting from 0(prefixx) and index i matches till (i+z[i] and i+z[i]);  
///  so for string matching add pattern + # + string and the for index subtract (sizeof(pattern)+1) from z;
///  to check for prefixx equal to suffix (just see i == z[n-i] )   length of i if equal to z value at index (n-i);

  1. always check for unintialized vector.
  2. priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> > pq; for djikstra
  3. check for constrained properly
  4. 10^8 operations per second
  5. Every even integer greater than 2 can be expressed as the sum of two primes.
  6. odd number can be expresses in sum of two prime number only if (n-2) is prime.
  7. always pass string vector everything  by reference else can get MLe TLE;
  8. An even digits of pallindromic number is always divided by 11 euler project 4th question..
  9. lookup in a set is logn and in a vector is n 
 10. We are given an undirected connected graph, 
     it is necessary to orient its arc so as to obtain a strongly connected directed graph.
	 There is theorem (on a theoretical basis for a written task) that a graph admits an 
	 orientation to a strongly connected digraph if and only if every edge is part of what a cycle.
	 and to find the orientation of edges just do a dfs and take all edges in the direction of dfs
	 if there is only one scc component then the graph is strongly connected
 11.want to find set of size 4 with gcd of all as 1 then take three consecutive odd and a even thats it;;;; 
  
  If n = 12, the time complexity can be O(n!).
  If n = 25, the time complexity can be O(2^n).
  If n = 100, the time complexity can be O(n4).
  If n = 500, the time complexity can be O(n3).
  If n = 10^4, the time complexity can be O(n2).
  If n = 10^6, the time complexity can be O(n log n).
  If n = 10^8, the time complexity can be O(n).
  If n > 10^8, the time complexity can be O(log n) or O(1).
*/




-----------------------------------------------***** BIGINTEGER ******-----------------------------------------
struct bigint {
  vector<int> a;
  int sign;
 
  bigint() :
    sign(1) {
  }
 
  bigint(long long v) {
    *this = v;
  }
 
  bigint(const string &s) {
    read(s);
  }
 
  void operator=(const bigint &v) {
    sign = v.sign;
    a = v.a;
  }
 
  void operator=(long long v) {
    sign = 1;
    if (v < 0)
      sign = -1, v = -v;
    for (; v > 0; v = v / base)
      a.push_back(v % base);
  }
 
  bigint operator+(const bigint &v) const {
    if (sign == v.sign) {
      bigint res = v;
 
      for (int i = 0, carry = 0; i < (int) max(a.size(), v.a.size()) || carry; ++i) {
        if (i == (int) res.a.size())
          res.a.push_back(0);
        res.a[i] += carry + (i < (int) a.size() ? a[i] : 0);
        carry = res.a[i] >= base;
        if (carry)
          res.a[i] -= base;
      }
      return res;
    }
    return *this - (-v);
  }
 
  bigint operator-(const bigint &v) const {
    if (sign == v.sign) {
      if (abs() >= v.abs()) {
        bigint res = *this;
        for (int i = 0, carry = 0; i < (int) v.a.size() || carry; ++i) {
          res.a[i] -= carry + (i < (int) v.a.size() ? v.a[i] : 0);
          carry = res.a[i] < 0;
          if (carry)
            res.a[i] += base;
        }
        res.trim();
        return res;
      }
      return -(v - *this);
    }
    return *this + (-v);
  }
 
  void operator*=(int v) {
    if (v < 0)
      sign = -sign, v = -v;
    for (int i = 0, carry = 0; i < (int) a.size() || carry; ++i) {
      if (i == (int) a.size())
        a.push_back(0);
      long long cur = a[i] * (long long) v + carry;
      carry = (int) (cur / base);
      a[i] = (int) (cur % base);
      //asm("divl %%ecx" : "=a"(carry), "=d"(a[i]) : "A"(cur), "c"(base));
    }
    trim();
  }
 
  bigint operator*(int v) const {
    bigint res = *this;
    res *= v;
    return res;
  }
 
  friend pair<bigint, bigint> divmod(const bigint &a1, const bigint &b1) {
    int norm = base / (b1.a.back() + 1);
    bigint a = a1.abs() * norm;
    bigint b = b1.abs() * norm;
    bigint q, r;
    q.a.resize(a.a.size());
 
    for (int i = a.a.size() - 1; i >= 0; i--) {
      r *= base;
      r += a.a[i];
      int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];
      int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];
      int d = ((long long) base * s1 + s2) / b.a.back();
      r -= b * d;
      while (r < 0)
        r += b, --d;
      q.a[i] = d;
    }
 
    q.sign = a1.sign * b1.sign;
    r.sign = a1.sign;
    q.trim();
    r.trim();
    return make_pair(q, r / norm);
  }
 
  bigint operator/(const bigint &v) const {
    return divmod(*this, v).first;
  }
 
  bigint operator%(const bigint &v) const {
    return divmod(*this, v).second;
  }
 
  void operator/=(int v) {
    if (v < 0)
      sign = -sign, v = -v;
    for (int i = (int) a.size() - 1, rem = 0; i >= 0; --i) {
      long long cur = a[i] + rem * (long long) base;
      a[i] = (int) (cur / v);
      rem = (int) (cur % v);
    }
    trim();
  }
 
  bigint operator/(int v) const {
    bigint res = *this;
    res /= v;
    return res;
  }
 
  int operator%(int v) const {
    if (v < 0)
      v = -v;
    int m = 0;
    for (int i = a.size() - 1; i >= 0; --i)
      m = (a[i] + m * (long long) base) % v;
    return m * sign;
  }
 
  void operator+=(const bigint &v) {
    *this = *this + v;
  }
  void operator-=(const bigint &v) {
    *this = *this - v;
  }
  void operator*=(const bigint &v) {
    *this = *this * v;
  }
  void operator/=(const bigint &v) {
    *this = *this / v;
  }
 
  bool operator<(const bigint &v) const {
    if (sign != v.sign)
      return sign < v.sign;
    if (a.size() != v.a.size())
      return a.size() * sign < v.a.size() * v.sign;
    for (int i = a.size() - 1; i >= 0; i--)
      if (a[i] != v.a[i])
        return a[i] * sign < v.a[i] * sign;
    return false;
  }
 
  bool operator>(const bigint &v) const {
    return v < *this;
  }
  bool operator<=(const bigint &v) const {
    return !(v < *this);
  }
  bool operator>=(const bigint &v) const {
    return !(*this < v);
  }
  bool operator==(const bigint &v) const {
    return !(*this < v) && !(v < *this);
  }
  bool operator!=(const bigint &v) const {
    return *this < v || v < *this;
  }
 
  void trim() {
    while (!a.empty() && !a.back())
      a.pop_back();
    if (a.empty())
      sign = 1;
  }
 
  bool isZero() const {
    return a.empty() || (a.size() == 1 && !a[0]);
  }
 
  bigint operator-() const {
    bigint res = *this;
    res.sign = -sign;
    return res;
  }
 
  bigint abs() const {
    bigint res = *this;
    res.sign *= res.sign;
    return res;
  }
 
  long long longValue() const {
    long long res = 0;
    for (int i = a.size() - 1; i >= 0; i--)
      res = res * base + a[i];
    return res * sign;
  }
 
  friend bigint gcd(const bigint &a, const bigint &b) {
    return b.isZero() ? a : gcd(b, a % b);
  }
  friend bigint lcm(const bigint &a, const bigint &b) {
    return a / gcd(a, b) * b;
  }
 
  void read(const string &s) {
    sign = 1;
    a.clear();
    int pos = 0;
    while (pos < (int) s.size() && (s[pos] == '-' || s[pos] == '+')) {
      if (s[pos] == '-')
        sign = -sign;
      ++pos;
    }
    for (int i = s.size() - 1; i >= pos; i -= base_digits) {
      int x = 0;
      for (int j = max(pos, i - base_digits + 1); j <= i; j++)
        x = x * 10 + s[j] - '0';
      a.push_back(x);
    }
    trim();
  }
 
  friend istream& operator>>(istream &stream, bigint &v) {
    string s;
    stream >> s;
    v.read(s);
    return stream;
  }
 
  friend ostream& operator<<(ostream &stream, const bigint &v) {
    if (v.sign == -1)
      stream << '-';
    stream << (v.a.empty() ? 0 : v.a.back());
    for (int i = (int) v.a.size() - 2; i >= 0; --i)
      stream << setw(base_digits) << setfill('0') << v.a[i];
    return stream;
  }
 
  static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {
    vector<long long> p(max(old_digits, new_digits) + 1);
    p[0] = 1;
    for (int i = 1; i < (int) p.size(); i++)
      p[i] = p[i - 1] * 10;
    vector<int> res;
    long long cur = 0;
    int cur_digits = 0;
    for (int i = 0; i < (int) a.size(); i++) {
      cur += a[i] * p[cur_digits];
      cur_digits += old_digits;
      while (cur_digits >= new_digits) {
        res.push_back((int)(cur % p[new_digits]));
        cur /= p[new_digits];
        cur_digits -= new_digits;
      }
    }
    res.push_back((int) cur);
    while (!res.empty() && !res.back())
      res.pop_back();
    return res;
  }
 
  typedef vector<long long> vll;
 
  static vll karatsubaMultiply(const vll &a, const vll &b) {
    int n = a.size();
    vll res(n + n);
    if (n <= 32) {
      for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
          res[i + j] += a[i] * b[j];
      return res;
    }
 
    int k = n >> 1;
    vll a1(a.begin(), a.begin() + k);
    vll a2(a.begin() + k, a.end());
    vll b1(b.begin(), b.begin() + k);
    vll b2(b.begin() + k, b.end());
 
    vll a1b1 = karatsubaMultiply(a1, b1);
    vll a2b2 = karatsubaMultiply(a2, b2);
 
    for (int i = 0; i < k; i++)
      a2[i] += a1[i];
    for (int i = 0; i < k; i++)
      b2[i] += b1[i];
 
    vll r = karatsubaMultiply(a2, b2);
    for (int i = 0; i < (int) a1b1.size(); i++)
      r[i] -= a1b1[i];
    for (int i = 0; i < (int) a2b2.size(); i++)
      r[i] -= a2b2[i];
 
    for (int i = 0; i < (int) r.size(); i++)
      res[i + k] += r[i];
    for (int i = 0; i < (int) a1b1.size(); i++)
      res[i] += a1b1[i];
    for (int i = 0; i < (int) a2b2.size(); i++)
      res[i + n] += a2b2[i];
    return res;
  }
 
  bigint operator*(const bigint &v) const {
    vector<int> a6 = convert_base(this->a, base_digits, 6);
    vector<int> b6 = convert_base(v.a, base_digits, 6);
    vll a(a6.begin(), a6.end());
    vll b(b6.begin(), b6.end());
    while (a.size() < b.size())
      a.push_back(0);
    while (b.size() < a.size())
      b.push_back(0);
    while (a.size() & (a.size() - 1))
      a.push_back(0), b.push_back(0);
    vll c = karatsubaMultiply(a, b);
    bigint res;
    res.sign = sign * v.sign;
    for (int i = 0, carry = 0; i < (int) c.size(); i++) {
      long long cur = c[i] + carry;
      res.a.push_back((int) (cur % 1000000));
      carry = (int) (cur / 1000000);
    }
    res.a = convert_base(res.a, 6, base_digits);
    res.trim();
    return res;
  }
};


-----------------------------------------------****LIS(nlogn)***------------------------------
strictly increasing only
int lis(vector<int> & a)
{
    int n = a.size();
    const int INF = 1e10;
    vector<int> d(n + 1, INF);
    d[0] = -INF;
 
    for (int i = 0; i < n; i++) {
        int j = upper_bound(d.begin(), d.end(), a[i]) - d.begin();
        if (d[j - 1] <= a[i] && a[i] < d[j])
            d[j] = a[i];
    }
 
    int ans = 0;
    for (int i = 0; i <= n; i++) {
        if (d[i] < INF)
            ans = i;
    }
 
    return ans;
}